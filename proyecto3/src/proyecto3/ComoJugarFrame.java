
package proyecto3;


public class ComoJugarFrame extends javax.swing.JFrame {

   
    public ComoJugarFrame() {
        initComponents();
        this.setLocationRelativeTo(null);   //ASI SE PONE LA VENTANA CENTRADA
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("                                                                                                                                                  ¿Cómo Jugar?");
        setPreferredSize(new java.awt.Dimension(1000, 786));
        setResizable(false);
        getContentPane().setLayout(null);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.setText("a) CONTEXTO DEL JUEGO\n   Existe una nave espacial con 16 tripulantes cuyo objetivo es explorar algunos planetas del sistema solar en búsqueda de recursos o formas de vida.\n   Sin embargo, uno de ellos es un impostor cuya meta es destruir todos los planetas sin ser descubierto. Tu misión es descubrir quién es ese \n   impostor buscando pistas que revelen su identidad antes de que sea demasiado tarde.\n  \n\n b) TABLERO DEL JUEGO\n   -Cartas: Cada carta posee una foto de un tripulante de la nave la cual se revela al ser volteada.\n\n   -Interaccion con las cartas: Existen 3 botones asociados a las cartas: Azul, Verde y Rojo. Con el botón azul podrás revelar cual es el tripulante \n    detrás de esa carta. Con el botón verde podrás descartar ese tripulante una vez estés seguro de que no es el impostor, pero cuidado, si el que \n    descartas resultaba ser el impostor, pierdes la partida. Con el botón rojo culparás al tripulante de la carta como impostor. \n    Si acertas la acusación, ganas. Si fallas, pierdes.\n\n   -Signo de pregunta: El signo de pregunta representa al impostor y su movimiento en el tablero. El recorrido por los planetas está descrito en \n    pantalla como Inicio y Fin. Cada vez que visiten un planeta, el signo de pregunta avanzará indicando que ahí también se encuentra el impostor. \n    Si aun no se descubre al impostor y se avanza de un planeta a otro, este se destruye y queda marcado con una X roja.\n\n   -Dados: Cada turno debes lanzar 3 dados, las caras de cada uno de ellos estan compuestas por 3 huellas y 3 ojos. Antes de lanzarlos deberás decidir \n    si estás en busqueda de huellas o ojos. Si andas en búsqueda de pistas deberás intentar obtener 3 huellas. Por otro lado, si estás en búsqueda de \n    revelar más tripulantes volteando cartas, deberás intentar obtener 3 ojos. Cada vez que tires los 3 dados, si no conseguiste las 3 huellas o los 3 \n    ojos, aún tienes la oportunidad de hacer rerrol (lanzar de nuevo) con dos de ellos, los que tu quieras. Cada lanzamiento de dado se realiza por medio\n    de botones, luego de presionarlos se muestra en pantalla lo que obtuviste con ese dado.\n\n   -Pistas: Cada tripulante tiene un color y dos accesorios. Las pistas estan compuestas por todos esos colores y accesorios existentes. Luego de obtener\n    alguna pista puedes usar el decifrador de pistas para saber si la pista le pertenece o no al impostor. Luego de esto, cada pista obtenida se guardará\n    a la derecha del tablero y se organizarán debajo de \"Pistas Incriminatorias\" o \"Pistas Descartadas\". Las incriminatorias serían las pistas que sí le \n    pertenecen al impostor y las descartadas las que no.\n\n   -Decifrador de Pistas: Cada pista obtenida tiene debajo de ella la opcion de usar el decifrador. Su funcion es indicar si la pista obtenida le pertenece\n    o no al impostor.\n\n   -Turnos: Cada turno se define por el lanzamiento de dados. Si logras obtener 3 estrellas se te darán las pistas y contará como turno y luego empezará uno\n    nuevo. Si obtienes 3 ojos podrás revelar 2 tripulantes volteando cartas y también contará como turno. Existen los turnos fallidos, estos se dan cuando\n    no logras obtener las 3 huellas u ojos. Cada dos turnos fallidos se avanza al planeta siguiente y se toma como una victoria del impostor. \n    Recuerda que cada vez que se pasa de un planeta a otro, el que se deja atrás se destruye. \n\n\n c) OBJETIVO DEL JUEGO \n    Debes evitar que el impostor destruya el último planeta (la Tierra). \n    Para ello tendrás que conseguir todas las pistas que puedas para así tener información de como luce el impostor. Cuando creas que tengas suficientes, \n    lo ideal sería revelar tantos tripulantes como sea posible (levantando cartas) hasta que logres dar con la identidad del impostor y poder culparlo. \n    De la anterior manera ganarás la partida y salvarás todos los planetas que puedas.\n\n\n");
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 1101, 801);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComoJugarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComoJugarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComoJugarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComoJugarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComoJugarFrame().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}